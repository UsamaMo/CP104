"""
-------------------------------------------------------
[Lab 11 Functions]
-------------------------------------------------------
Author:  Usama Mohiuddin
ID:           212090340
Email:     mohi0340@mylaurier.ca
__updated__ = "2021-12-03"
-------------------------------------------------------
"""
from random import uniform, randint

# Task 1


def generate_matrix_num(rows, cols, low, high, value_type):
    """
    -------------------------------------------------------
    Generates a 2D list of numbers of the given type, 'float' or 'int'.
    (To generate random float number use random.uniform and to
    generate random integer number use random.randint)
    Use: matrix = generate_matrix_num(rows, cols, low, high, value_type)
    -------------------------------------------------------
    Parameters:
        rows - number of rows in the list (int > 0)
        cols - number of columns (int > 0)
        low - low value of range (float)
        high - high value of range (float > low)
        value_type - type of values in the list, 'float' or 'int' (str)
    Returns:
        matrix - a 2D list of random numbers (2D list of float/int)
    -------------------------------------------------------
    """
    # Initialize the matrix
    matrix = []
    for i in range(rows):
        temp_list = []
        for i in range(cols):
            if value_type == 'float':
                # Import uniform like above
                temp_list.append(uniform(low, high))
            # This could've been an else statement
            # Import randint like above
            elif value_type == 'int':
                temp_list.append(randint(low, high))
        matrix.append(temp_list)
    return matrix


# Task 2
def generate_matrix_char(rows, cols):
    """
    -------------------------------------------------------
    Generates a 2D list of random lower case letter ('a' - 'z') values
    Use: matrix = generate_matrix_char(rows, cols)
    -------------------------------------------------------
    Parameters:
        rows - number of rows in the generated matrix (int > 0)
        cols - number of columns in the generated matrix (int > 0)
    Returns:
        matrix - a 2D list of random characters (2D list of str)
    -------------------------------------------------------
    """
    # Initialize the matrix
    matrix = []
    for i in range(rows):
        temp_list = []
        for i in range(cols):
            temp_list.append(chr(randint(97, 122)))
        matrix.append(temp_list)
    return matrix

# Task 5


def words_to_matrix(word_list):
    """
    -------------------------------------------------------
    Generates a 2D list of character values from the given
    list of words. All words must be the same length.
    Use: matrix = words_to_matrix(word_list)
    -------------------------------------------------------
    Parameters:
        word_list - a list containing the words to be placed in
            the matrix (list of string)
    Returns:
        matrix - a 2D list of characters of the given words
         in word_list (2D list of string).
    -------------------------------------------------------
    """
    # Initialize the matrix
    matrix = []
    for i in word_list:
        temp_list = []
        for j in i:
            temp_list.append(j)
        matrix.append(temp_list)
    return matrix

# Task 6


def stats(matrix):
    """
    -------------------------------------------------------
    Returns statistics on a 2D list.
        Use: smallest, largest, total, average = stats(matrix)
    -------------------------------------------------------
    Parameters:
        matrix - a 2D list of numbers (2D list of float/int)
    Returns:
        smallest - the smallest number in matrix (float/int)
        largest - the largest number in matrix (float/int)
        total - the total of the numbers in matrix (float/int)
        average - the average of numbers in matrix (float/int)
    -------------------------------------------------------
    """
    smallest = matrix[0][0]
    largest = matrix[0][0]
    num_values = 0
    total = 0
    for i in matrix:
        for j in i:
            num_values += 1
            total += j
            if j < smallest:
                smallest = j
            if j > largest:
                largest = j
    average = total / num_values
    return smallest, largest, total, average

# Task 13


def scalar_multiply(matrix, num):
    """
    -------------------------------------------------------
    Update matrix by multiplying each element of matrix by num.
    Use: scalar_multiply(matrix, num)
    -------------------------------------------------------
    Parameters:
        matrix - the matrix to multiply (2D list of int/float)
        num - the number to multiply by (int/float)
    Returns:
        None
    ------------------------------------------------------
    """
    for i in matrix:
        for j in range((len(i))):
            temp_num = i[j] * num
            i[j] = temp_num
    return
